{"version":3,"sources":["assets/chattyChat.png","components/ChattyLogo.js","components/MessengerScreen.js","components/TextInput.js","components/SendButton.js","components/UserName.js","components/MessageCounter.js","actions/chatActions.js","App.js","serviceWorker.js","reducers/chattyReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","ChattyLogo","react_default","a","createElement","className","src","require","alt","MessengerScreen","props","chatMessages","map","message","index","key","TextInput","type","name","placeholder","SendButton","UserName","onBlur","updateUserName","MessageCounter","id","count","newUserName","dispatch","updateMessageCount","updateMessageList","newMessage","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","database","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateName","bind","assertThisInitialized","sendMessageToChat","_this2","ref","on","snapshot","data","val","concat","user","chatActions","event","preventDefault","target","value","messageText","elements","messageToSend","messageInfo","userName","timestamp","Date","now","console","log","push","components_ChattyLogo","components_UserName","components_MessengerScreen","messageList","components_MessageCounter","messageCount","onSubmit","components_TextInput","components_SendButton","Component","connect","state","bindActionCreators","Boolean","window","location","hostname","match","initialState","chattyReducer","arguments","length","undefined","action","objectSpread","toConsumableArray","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c620a75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chattyChat.db4249d8.png\";","import React from \"react\";\nimport \"../App.css\";\n\nconst ChattyLogo = () => {\n  return (\n    <img\n      className=\"chattyIcon\"\n      src={require(\"../assets/chattyChat.png\")}\n      alt=\"ChattyChat Logo\"\n    />\n  );\n};\n\nexport default ChattyLogo;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst MessengerScreen = (props) => {\n    \n  return (\n    <div className=\"chattyMessagesBox\">\n      {\n        props.chatMessages.map( (message, index) => {\n          return (\n            <div key={index}>\n              <div className=\"singleMessage\">\n                {message}\n              </div>\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default MessengerScreen;","import React from \"react\";\nimport \"../App.css\";\n\nconst TextInput = () => {\n  return (\n    <input\n      type=\"text\"\n      name=\"messageToSend\"\n      className=\"inputField\"\n      placeholder=\"Chatty here...\"\n    />\n  );\n};\n\nexport default TextInput;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst SendButton = () => {\n  \n    return <button className=\"sendButton\">Send</button>;\n};\n\nexport default SendButton;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst UserName = (props) => {\n  return (\n    <input\n      type=\"text\"\n      name=\"userNameToUpdate\"\n      className=\"userNameField\"\n      placeholder=\"Your name...\"\n      onBlur={props.updateUserName}\n    />\n  );\n};\n\nexport default UserName;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst MessageCounter = (props) => {\n      \n  return (\n    <div id=\"div-counter\" className=\"messageCount\">\n      nยบ messages: {props.count}\n    </div> \n  );\n};\n\nexport default MessageCounter;","export const updateUserName = (newUserName) => {\n  return dispatch => {\n    dispatch({\n      type: \"UPDATE_USERNAME\",\n      newUserName \n    })\n  };\n}\n\nexport const updateMessageCount = () => {\n  return dispatch => {\n    dispatch({\n      type: \"UPDATE_MESSAGE_COUNT\"\n    })\n  };\n}\n\nexport const updateMessageList = (newMessage) => {\n\n  return dispatch => {\n    dispatch({\n      type: \"UPDATE_MESSAGE_LIST\",\n      newMessage\n    })\n  };\n}","import React, { Component } from 'react';\nimport firebase from 'firebase';\nimport ChattyLogo from './components/ChattyLogo';\nimport MessengerScreen from './components/MessengerScreen';\nimport TextInput from './components/TextInput';\nimport SendButton from './components/SendButton';\nimport UserName from './components/UserName';\nimport MessageCounter from \"./components/MessageCounter\";\nimport { bindActionCreators } from 'redux'\nimport { connect } from \"react-redux\";\nimport { updateUserName, updateMessageCount,\nupdateMessageList } from \"./actions/chatActions\";\nimport \"./App.css\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCx7m7nweFw4Xum99PHC2EXDMzVDwIYraA\",\n  authDomain: \"chattychat-41efa.firebaseapp.com\",\n  databaseURL: \"https://chattychat-41efa.firebaseio.com\",\n  projectId: \"chattychat-41efa\",\n  storageBucket: \"chattychat-41efa.appspot.com\",\n  messagingSenderId: \"813101374260\"\n};\n\nconst chatChannel = \"ChattyChat_channel_01\";\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.database();\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    \n    this.updateName = this.updateName.bind(this);\n    this.sendMessageToChat = this.sendMessageToChat.bind(this);\n  }\n  \n  componentDidMount() {\n\n    db.ref(chatChannel).on(\"child_added\", snapshot => {\n      let data = snapshot.val();\n      let newMessage = `${data.user}: ${data.message}`;\n      \n      //Llamar a funciones de actions!\n      this.props.chatActions.updateMessageList(newMessage);\n      this.props.chatActions.updateMessageCount();\n    });\n  }\n  \n  updateName(event) {\n    event.preventDefault();\n        \n    let newUserName = event.target.value;\n\n    if (newUserName) {\n      //Llamar a funciones de actions!\n      this.props.chatActions.updateUserName(newUserName);      \n    }\n  }\n  \n  sendMessageToChat(event) {\n    event.preventDefault();\n\n    let messageText = event.target.elements.messageToSend.value;\n    if (messageText) {\n      let messageInfo = {\n        user: this.props.userName,\n        message: messageText,\n        timestamp: Date.now()\n      };\n      console.log(messageInfo);\n\n      db.ref(chatChannel).push(messageInfo);\n      // clean input area on click\n      event.target.elements.messageToSend.value = '';\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"appContainer globalBackground\">\n      \n        <div className=\"topContainer\">\n          <ChattyLogo />\n          <UserName\n            updateUserName={this.updateName}   \n          />\n        </div>\n        \n        <MessengerScreen\n          chatMessages={this.props.messageList}\n        />\n        \n        <MessageCounter\n          count={this.props.messageCount}\n        />\n        \n        <div className=\"inputContainer\">\n          <form onSubmit={this.sendMessageToChat}>\n            <TextInput />\n            <SendButton />          \n          </form>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nconst mapSateToProps = state => ({\n  userName: state.userName,\n  messageCount: state.messageCount,\n  messageList: state.messageList\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  chatActions: bindActionCreators({\n    updateUserName,\n    updateMessageList,\n    updateMessageCount\n  }, dispatch)\n});\n\nexport default connect(mapSateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  userName: \"Someone\",\n  messageCount: 0,\n  messageList: []\n};\n\nconst chattyReducer = (state = initialState, action) => {\n  switch(action.type) {\n\n    case 'UPDATE_USERNAME':\n      return {...state, userName: action.newUserName }\n\n    case 'UPDATE_MESSAGE_COUNT':\n      return {...state,  messageCount: [...state.messageList].length + 1 }\n\n    case 'UPDATE_MESSAGE_LIST': \n      return { ...state, messageList: [...state.messageList, action.newMessage] }\n\n    default:\n      return state\n  }\n};\n\nexport default chattyReducer;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from \"react-redux\";\nimport thunk from 'redux-thunk';\nimport chattyReducer from \"./reducers/chattyReducer\";\n\n// this way redux allow us to pass async actions instead of plain objects!\nconst store = createStore(chattyReducer, compose(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}